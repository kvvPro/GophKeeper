// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: exchange.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Exchange_Ping_FullMethodName        = "/exchange.Exchange/Ping"
	Exchange_Register_FullMethodName    = "/exchange.Exchange/Register"
	Exchange_Auth_FullMethodName        = "/exchange.Exchange/Auth"
	Exchange_PutUserData_FullMethodName = "/exchange.Exchange/PutUserData"
	Exchange_PutRawData_FullMethodName  = "/exchange.Exchange/PutRawData"
	Exchange_PutTextData_FullMethodName = "/exchange.Exchange/PutTextData"
	Exchange_PutCardData_FullMethodName = "/exchange.Exchange/PutCardData"
	Exchange_DeleteInfo_FullMethodName  = "/exchange.Exchange/DeleteInfo"
	Exchange_GetInfo_FullMethodName     = "/exchange.Exchange/GetInfo"
)

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Register(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*AuthResponse, error)
	Auth(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*AuthResponse, error)
	PutUserData(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*PutDelInfoResponse, error)
	PutRawData(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*PutDelInfoResponse, error)
	PutTextData(ctx context.Context, in *TextData, opts ...grpc.CallOption) (*PutDelInfoResponse, error)
	PutCardData(ctx context.Context, in *CardData, opts ...grpc.CallOption) (*PutDelInfoResponse, error)
	DeleteInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*PutDelInfoResponse, error)
	GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Exchange_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Register(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Exchange_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Auth(ctx context.Context, in *AuthInfo, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Exchange_Auth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) PutUserData(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*PutDelInfoResponse, error) {
	out := new(PutDelInfoResponse)
	err := c.cc.Invoke(ctx, Exchange_PutUserData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) PutRawData(ctx context.Context, in *RawData, opts ...grpc.CallOption) (*PutDelInfoResponse, error) {
	out := new(PutDelInfoResponse)
	err := c.cc.Invoke(ctx, Exchange_PutRawData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) PutTextData(ctx context.Context, in *TextData, opts ...grpc.CallOption) (*PutDelInfoResponse, error) {
	out := new(PutDelInfoResponse)
	err := c.cc.Invoke(ctx, Exchange_PutTextData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) PutCardData(ctx context.Context, in *CardData, opts ...grpc.CallOption) (*PutDelInfoResponse, error) {
	out := new(PutDelInfoResponse)
	err := c.cc.Invoke(ctx, Exchange_PutCardData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) DeleteInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*PutDelInfoResponse, error) {
	out := new(PutDelInfoResponse)
	err := c.cc.Invoke(ctx, Exchange_DeleteInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, Exchange_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
// All implementations must embed UnimplementedExchangeServer
// for forward compatibility
type ExchangeServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Register(context.Context, *AuthInfo) (*AuthResponse, error)
	Auth(context.Context, *AuthInfo) (*AuthResponse, error)
	PutUserData(context.Context, *UserData) (*PutDelInfoResponse, error)
	PutRawData(context.Context, *RawData) (*PutDelInfoResponse, error)
	PutTextData(context.Context, *TextData) (*PutDelInfoResponse, error)
	PutCardData(context.Context, *CardData) (*PutDelInfoResponse, error)
	DeleteInfo(context.Context, *InfoRequest) (*PutDelInfoResponse, error)
	GetInfo(context.Context, *InfoRequest) (*GetInfoResponse, error)
	mustEmbedUnimplementedExchangeServer()
}

// UnimplementedExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeServer struct {
}

func (UnimplementedExchangeServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedExchangeServer) Register(context.Context, *AuthInfo) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedExchangeServer) Auth(context.Context, *AuthInfo) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedExchangeServer) PutUserData(context.Context, *UserData) (*PutDelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserData not implemented")
}
func (UnimplementedExchangeServer) PutRawData(context.Context, *RawData) (*PutDelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRawData not implemented")
}
func (UnimplementedExchangeServer) PutTextData(context.Context, *TextData) (*PutDelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTextData not implemented")
}
func (UnimplementedExchangeServer) PutCardData(context.Context, *CardData) (*PutDelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCardData not implemented")
}
func (UnimplementedExchangeServer) DeleteInfo(context.Context, *InfoRequest) (*PutDelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfo not implemented")
}
func (UnimplementedExchangeServer) GetInfo(context.Context, *InfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedExchangeServer) mustEmbedUnimplementedExchangeServer() {}

// UnsafeExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServer will
// result in compilation errors.
type UnsafeExchangeServer interface {
	mustEmbedUnimplementedExchangeServer()
}

func RegisterExchangeServer(s grpc.ServiceRegistrar, srv ExchangeServer) {
	s.RegisterService(&Exchange_ServiceDesc, srv)
}

func _Exchange_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Register(ctx, req.(*AuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Auth(ctx, req.(*AuthInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_PutUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).PutUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_PutUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).PutUserData(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_PutRawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).PutRawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_PutRawData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).PutRawData(ctx, req.(*RawData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_PutTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).PutTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_PutTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).PutTextData(ctx, req.(*TextData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_PutCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).PutCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_PutCardData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).PutCardData(ctx, req.(*CardData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_DeleteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).DeleteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_DeleteInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).DeleteInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exchange_ServiceDesc is the grpc.ServiceDesc for Exchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Exchange_Ping_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Exchange_Register_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Exchange_Auth_Handler,
		},
		{
			MethodName: "PutUserData",
			Handler:    _Exchange_PutUserData_Handler,
		},
		{
			MethodName: "PutRawData",
			Handler:    _Exchange_PutRawData_Handler,
		},
		{
			MethodName: "PutTextData",
			Handler:    _Exchange_PutTextData_Handler,
		},
		{
			MethodName: "PutCardData",
			Handler:    _Exchange_PutCardData_Handler,
		},
		{
			MethodName: "DeleteInfo",
			Handler:    _Exchange_DeleteInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Exchange_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange.proto",
}
